// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chamber {
  id         String       @id @default(uuid())
  name       String       @default("USA Africa Chamber of Commerce")
  address    String       @default("158 N. Wacker Drive Suite #4250, Chicago, IL 60605")
  phone      String       @default("0708-473-6983")
  email      String       @default("info@usaafricachamber.org")
  website    String       @default("https://usaafricachamber.org")
  services   Service[]
  leadership Leadership[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model UnityFirstEvent {
  id          String    @id @default(uuid())
  title       String    @default("Unity First Summit")
  description String?
  date        DateTime
  endDate     DateTime?
  venue       String    @default("Catholic University, Washington DC")
  address     String?
  capacity    Int       @default(500)
  isActive    Boolean   @default(true)
  sessions    Session[]
  tickets     Ticket[]
  sponsors    Sponsor[]
  attendees   Attendee[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Session {
  id          String           @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  speaker     String
  speakerBio  String?
  tags        String[]
  eventId     String
  event       UnityFirstEvent  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendees   SessionAttendee[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Ticket {
  id          String          @id @default(uuid())
  name        String          // "Summit Pass", "VIP Gala", "Exhibitor"
  description String?
  price       Float           // 150.00, 250.00, 500.00
  quantity    Int             @default(100)
  sold        Int             @default(0)
  isActive    Boolean         @default(true)
  eventId     String
  event       UnityFirstEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  purchases   TicketPurchase[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Sponsor {
  id          String          @id @default(uuid())
  name        String
  tier        String          // "Unity Partner", "Gold", "Silver", "Bronze"
  logo        String?
  website     String?
  description String?
  amount      Float
  benefits    String[]
  eventId     String
  event       UnityFirstEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Service {
  id          String   @id @default(uuid())
  category    String   // "Employment", "Financial", "Business Development"
  title       String
  description String
  programs    String[]
  isActive    Boolean  @default(true)
  chamberId   String
  chamber     Chamber  @relation(fields: [chamberId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Leadership {
  id          String   @id @default(uuid())
  name        String
  title       String
  roles       String[]
  bio         String?
  awards      String[]
  image       String?
  email       String?
  linkedin    String?
  isActive    Boolean  @default(true)
  chamberId   String
  chamber     Chamber  @relation(fields: [chamberId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  role          UserRole  @default(ATTENDEE)
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  attendee      Attendee?
}

model Attendee {
  id              String            @id @default(uuid())
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName       String
  lastName        String
  company         String?
  jobTitle        String?
  phone           String?
  events          UnityFirstEvent[]
  ticketPurchases TicketPurchase[]
  sessions        SessionAttendee[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model TicketPurchase {
  id         String   @id @default(uuid())
  attendeeId String
  attendee   Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  ticketId   String
  ticket     Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  quantity   Int      @default(1)
  totalPrice Float
  status     String   @default("pending") // "pending", "completed", "cancelled"
  stripeId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model SessionAttendee {
  id         String   @id @default(uuid())
  sessionId  String
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  attendeeId String
  attendee   Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  checkedIn  Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@unique([sessionId, attendeeId])
}

enum UserRole {
  ADMIN
  ATTENDEE
}
